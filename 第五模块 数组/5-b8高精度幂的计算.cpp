//2251730 信07 刘淑仪
#include <iostream>
#include <iomanip>
using namespace std;

#define N_POW	112		//幂的次数
#define N_NUM	N_POW+1	//十进制形式的小数位数

/***************************************************************************
  函数名称：
  功    能：用二维数组第i行的值，计算第i+1行
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
void calc_next(char d_cur[], char d_next[], int i)
{
	for (int j = 1; j <= i; j++) {
		d_cur[j] = d_cur[j] - '0';
	}
	for (int j = 1; j <= N_POW; j++) {
		d_next[j] = d_next[j] + d_cur[j] / 2;
		if ((d_cur[j]) % 2 != 0)
			d_next[j + 1] = d_next[j + 1] + 5;
	}
	for (int j = 1; j <= i; j++) {
		d_cur[j] = d_cur[j] + '0';
	}
	for (int j = 1; j <= i + 1; j++) {
		d_next[j] = d_next[j] + '0';
	}
}

/***************************************************************************
  函数名称：
  功    能：根据幂次表，计算某个二进制小数的十进制值
  输入参数：char pure_decimal[] : 存放二进制小数的数组
			char out[] ：存放计算得到的十进制小数
		   char power_table[][N_NUM + 1]：幂次表
  返 回 值：
  说    明：
 ***************************************************************************/
void calc_num(char pure_decimal[], char out[], char power_table[][N_NUM + 1])
{
	for (int i = strlen(pure_decimal) - 1; i >= 1; i--)
	{
		for (int j = strlen(pure_decimal) - 1; j >= 1; j--)
		{
			if (power_table[j][i] != 0)
			{
				if (pure_decimal[j] != 48)
				{
					out[i] = out[i] + power_table[j][i] - 48;
					while (out[i] >= 10)
					{
						out[i] = out[i] - 10;
						i = i - 1;
						out[i] = out[i] + 1;
						i = i + 1;
						if (out[i - 1] < 10)
							break;
					}
				}
			}
		}
	}
}

void clear(char pure_decimal[])
{
	int i = 1;
	for (i = 1; i < N_NUM + 1; i++)
		pure_decimal[i] = 0;//重新全部赋值为0
	while (getchar() != 10)
		;//清空缓存区
}

/***************************************************************************
  函数名称：
  功    能：输入一个二进制纯小数
  输入参数：
  返 回 值：
  说    明：
 ***************************************************************************/
void input_pure_decimal(char pure_decimal[])
{
	for (int i = 0; i < N_NUM; i++) {
		pure_decimal[i] = getchar();
		if (i == 0) {
			if (pure_decimal[0] != 46) {
				cout << "不是以.开头，请重输" << endl;
				clear(pure_decimal);
				i = -1;
			}
		}
		else if (pure_decimal[i] != 10) {
			if (pure_decimal[i] != 48 && pure_decimal[i] != 49) {
				cout << "输入的不是0/1，请重输" << endl;
				clear(pure_decimal);
				i = -1;
			}
		}
		else
			break;
	}
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：is_upper ：1 - 上标尺
						 0 - 下标尺
  返 回 值：
  说    明：
***************************************************************************/
void output_rod(const bool is_upper)
{
	if (is_upper) { //上标尺
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
		cout << "----------- 上标尺  1         2         3         4         5         6         7         8         9         A         B         C" << endl;
		cout << "-----------123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" << endl;
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
	}
	else {//下标尺
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
		cout << "-----------123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" << endl;
		cout << "----------- 下标尺  1         2         3         4         5         6         7         8         9         A         B         C" << endl;
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
	}
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int main()
{
	/* 说明：首先定义 power_table[113][114]，输出为全0，再进行初始化
	*
	*  1、第[0]行整个不用，[1]~[112] 与2^-1 ~ 2^-112 对应，因此需要113行
	*  2、第[0]列存放幂次，[1]~[112]列依次存放十分位、百分位、千分位、...  （2^-i次方的十进制小数，最多i位），[113]预留，用于某些特殊要求，比如\0
	*  2、每行的第0列存放幂次，[1]~开始存放十进制的每一位，从而达到高精度存放的目的
	*     例：        第[0]列  第[1]列  第[2]列  第[3]列  第[4]列 ...
	*		第[1]行   -1     5        0        0        0		//表示0.5
	*		第[2]行   -2     2        5        0        0		//表示0.25
	*		第[3]行   -3     1        2        5        0		//表示0.125
	*		第[4]行   -4     0        6        2        5		//表示0.0625
	*			...
	*		第[112]行 -112   ...
	*
	注：1、本二维数组的类型，既可以是int，也可以是char，因为计算时，每个元素的值都在0-9之间，用char足够了（char型输出时注意数字0-9和字符0-9的问题即可）
		2、因为如此，本题放在数组综合训练中，而没有放在字符数组中
	*/
	char power_table[N_POW + 1][N_NUM + 1] = { 0 }; //先全部初始化为0
	int i;

	/* 初始化，[0]里面存放幂次，初始化后的结果为：
	   行|列  [0]   [1]   [2]
	   [0]     0     0     0  //本行不用
	   [1]     -1    5     0  // 2^-1 初始化为0.5
	   [2]     -2    0     0
	   ...
	   [112]   -112  0     0
	*/
	for (i = 1; i <= N_POW; i++) {
		power_table[i][0] = -i; //幂次 -1 ~ -52
	}
	power_table[1][1] = 5 + '0'; // 2^-1 = 0.5，先置[1][1]为5

	/* 循环方式计算幂表：
	   1、二维数组带一个下标，表示一个大小为114的一维数组
	   2、2^-1为已知的0.5，power_table[1]的内容为 -1 5 0 0 0 ... 0
	*/
	for (i = 1; i < N_POW; i++)
		calc_next(power_table[i], power_table[i + 1], i); //已知2^-i，求2^-(i+1)

	/* 上标尺 */
	output_rod(1);

	/* 输出 */
	for (i = 1; i <= N_POW; i++)
		cout << "2^" << setw(4) << -i << " : 0." << &power_table[i][1] << endl;

	/* 下标尺 */
	output_rod(0);
	cout << endl;

	/* 输入一个二进制纯小数 */
	char pure_decimal[N_NUM + 1] = { 0 };

	cout << "请输入一个二进制纯小数，小数点开头，小数点后不超过112位(例：.101101)" << endl;
	input_pure_decimal(pure_decimal);

	/* 上标尺 */
	cout << endl;
	output_rod(1);

	for (int i = strlen(pure_decimal) - 1; i >= 1; i--) {
		if (pure_decimal[i] == 48 || pure_decimal[i] == 10) {
			pure_decimal[i] = 0;
		}
		else
			break;
	}

	cout << "输入数据 : " << &pure_decimal[1] << endl;
	char out[N_NUM + 1] = { 0 };

	calc_num(pure_decimal, out, power_table);

	for (int i = strlen(pure_decimal) - 1; i >= 1; i--)
		out[i] = out[i] + '0';
	out[0] = '.';

	cout << "计算值 : 0" << out << endl;
	/* 下标尺 */
	output_rod(0);

	cout << endl;

	return 0;
}

/*
PPT例题的测试数据
.00110011001100110011010
*/